That was a fun exercise. I believe I captured most everything with the exception of availability. I prioritized it the least, because I assumed any query to the DB or Web Service would only return available cars. My implementation is a flat file implementation, so I tried to make it work but ran out of time. Let me try to summarize everything quickly. I provide a little more in the way of comments in the file.

1) Used Netbeans. I'll be sending it as a Netbeans project provided everything packages nicely and the package goes through email. Also will provide test cases with screen shots of results in testCases.pdf in the project. Feel free to modify the data file to test my program. Exported it through NetBeans to CarRentalBroker.zip. It made it thru Gmail's filter. Let me know if it doesn't make it through your email filter or want me to share it some other way.
2) File format is IATA code for Location. Just made sense to me to use that since all the locations provided were airports. Followed by comma-delimited lines of cars, off-peak (winter pricing- 10/31-03/31), & peak pricing (summer pricing 04/01-09/30).
3) Read file in (cars.txt). Shove all location data in an ArrayList of Car Objects. A car is a car model, off-peak pricing, & peak pricing. Store that value to a Hashtable with the key of the IATA code. Read until end of file.
4) Prompt user for IATA code. Three letters. Capitals. Assumed input would be correct. Prompt user for date. MMDDYYYY. Assumed input would be correct. These assumptions aren't real world, but was trying to get done within the hour. Also assumed common currency, but that's also not a real world assumption.
5) Grab the right location based on the IATA code. O(1) due to the Hashmap. Just use MM (month) to determine off-peak or peak. Sort arraylist by off-peak or peak pricing. O(n log n) based on Java's merge sort implementation. Since the sort is ascending. Pull the first element. Display the data. Good to go.
